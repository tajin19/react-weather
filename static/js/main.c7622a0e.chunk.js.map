{"version":3,"sources":["components/TextInput.js","redux/types.js","redux/actions.js","components/ConnectedTextInput.js","components/InputPanel.js","components/ConnectedInputPanel.js","App.js","redux/reducers.js","redux/index.js","reducers.js","serviceWorker.js","index.js"],"names":["TextInput","props","onKeyPressField","e","charCode","onChangeField","setState","target","value","updateZipCode","state","zipCode","zipCodePattern","type","className","this","zipcode","size","onKeyPress","event","onChange","Component","requestCurrentWeatherByZipCode","types","receiveCurrentWeatherByZipCode","json","currentWeatherData","receivedAt","Date","now","fetchCurrentWeatherByZipCode","dispatch","Promise","resolve","reject","setTimeout","fakeData","ConnectedTextInput","connect","actions","InputPanel","handleFetchButtonClick","onClick","ConnectedInputPanel","temperature","App","INITIAL_STATE","homeReducer","action","rootReducer","combineReducers","home","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"q5BAkDeA,G,wDA7Cb,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IAQPC,gBAAkB,SAACC,GAYjB,OAAQA,EAAEC,UAAY,IAAMD,EAAEC,UAAY,IArBzB,EAwBnBC,cAAgB,SAACF,GAEf,EAAKG,SAAS,CAAE,QAAWH,EAAEI,OAAOC,QACpC,EAAKP,MAAMQ,cAAcN,EAAEI,OAAOC,QAzBnC,EAAKE,MAAQ,CACZC,QAAS,GACTC,eAAgB,gBAJC,E,qDA+BT,IAAD,OACL,OACM,2BACIC,KAAK,OACLC,UAAU,aACVN,MAAUO,KAAKL,MAAMM,QACrBC,KAAK,IACLC,WAAc,SAAAC,GAAK,OAAI,EAAKjB,gBAAgBiB,IAC5CC,SAAW,SAAAD,GAAK,OAAI,EAAKd,cAAcc,U,GAzC/BE,cCET,EAL2B,oCAK3B,EAJ6B,sCAI7B,EAH6B,sCAG7B,EAFS,kB,QCElBC,EAAiC,SAACX,GAAD,MAAc,CACnDE,KAAMU,EACNZ,QAASA,IAGLa,EAAiC,SAACC,GAAD,MAAW,CAChDZ,KAAMU,EACNG,mBAAoBD,EACpBE,WAAYC,KAAKC,QAwCJ,GACbP,iCACAE,iCACAM,6BAlBmC,WAAsB,IAArBnB,EAAoB,uDAAV,MAE9C,OAAO,SAAAoB,GAEL,OADEA,EAAST,EAA+BX,IACnC,IAAIqB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WAETJ,EAASP,EAA+BY,IACxCH,MACC,WAUPxB,cAzCoB,SAACE,GAAD,MAAc,CAClCE,KAAMU,EACNZ,QAASA,KCCI0B,EALYC,aAVH,SAAC5B,GACvB,MAAO,CACLC,QAASD,EAAMC,YAIQ,SAAAoB,GAAQ,MAAK,CACtCtB,cAAe,SAACE,GAAD,OAAaoB,EAASQ,EAAQ9B,cAAcE,QAGlC2B,CAGzBtC,GCgBawC,E,4MA3BbC,uBAAyB,WAEvB,EAAKxC,MAAM6B,6BAA6B,EAAK7B,MAAMU,U,uDAInD,OACE,yBAAKG,UAAU,eACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,WACb,wBAAIA,UAAU,kBAAd,mBACA,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,uBAAf,YACA,6BAAK,kBAAC,EAAD,OACL,6BACE,4BAAQ4B,QAAS3B,KAAK0B,wBAAtB,mB,GAlBOpB,aCcVsB,EALaL,aATJ,SAAC5B,GAAD,MAAY,CAClCkC,YAAalC,EAAMkC,YACnBjC,QAASD,EAAMC,YAGU,SAAAoB,GAAQ,MAAK,CACtCD,6BAA8B,SAACnB,GAAD,OAAaoB,EAASQ,EAAQT,6BAA6BnB,QAG/D2B,CAG1BE,GCEaK,MAbf,WACE,OACM,6BACE,0BAAM/B,UAAU,QACd,kBAAC,EAAD,MACA,yBAAKA,UAAU,iBAAf,W,sBCRNgC,EAAgB,CACpBF,YAAa,KACbjC,QAAS,MA2BIoC,EAxBK,WAAkC,IAAjCrC,EAAgC,uDAA1BoC,EAAeE,EAAW,uCACnD,OAAOA,EAAOnC,MACZ,KAAKU,EAAyC,IAEpCqB,EAAgBI,EAAhBJ,YAGR,OAAO,2BACFlC,GADL,IAEEkC,gBAGJ,KAAKrB,EAAwB,IACnBZ,EAAYqC,EAAZrC,QACR,OAAO,2BACFD,GADL,IAEEC,YAIJ,QAAS,OAAOD,ICxBLqC,G,MAAAA,GCIAE,EAJKC,YAAgB,CAClCC,KAAMJ,ICQYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,YAAYT,EAAaU,YAAgBC,MAEvDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7622a0e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../App.css';\n\nclass TextInput extends Component {\n\n  constructor(props) {\n   super(props)\n   this.state = {\n    zipCode: '',\n    zipCodePattern: /^[0-9]{1,5}$/\n   }\n   //this.onHandleZipCodeChange = this.onHandleZipCodeChange.bind(this)\n  }\n\n  onKeyPressField = (e) => {\n    //debugger\n//     let zipCode = e.target.value\n//     let isZipCode = this.state.zipCodePattern.test(zipCode)\n//\n//     if (!isZipCode) {\n//         return false\n//     }\n//\n//     if (zipCode === '' || this.state.zipCodePattern.test(zipCode)) {\n//         this.setState({ [e.target.name]: zipCode })\n//     }\n    return (e.charCode >= 48 && e.charCode <= 57)\n  }\n\n  onChangeField = (e) => {\n    //debugger\n    this.setState({ 'zipCode': e.target.value })\n    this.props.updateZipCode(e.target.value)\n  }\n\n\n  render() {\n      return (\n            <input\n                type=\"text\"\n                className=\"text-input\"\n                value = { this.state.zipcode }\n                size=\"5\"\n                onKeyPress = {event => this.onKeyPressField(event)}\n                onChange= {event => this.onChangeField(event)}\n              />\n      );\n  }\n}\n\nexport default TextInput;\n","const FETCH_CURRENT_WEATHER_BY_ZIP_CODE = 'FETCH_CURRENT_WEATHER_BY_ZIP_CODE'\nconst REQUEST_CURRENT_WEATHER_BY_ZIP_CODE = 'REQUEST_CURRENT_WEATHER_BY_ZIP_CODE'\nconst RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE = 'RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE'\nconst UPDATE_ZIP_CODE = 'UPDATE_ZIP_CODE'\n\nexport default {\n  FETCH_CURRENT_WEATHER_BY_ZIP_CODE,\n  REQUEST_CURRENT_WEATHER_BY_ZIP_CODE,\n  RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE,\n  UPDATE_ZIP_CODE\n}","import types from './types.js';\n//import RequestBuilder from \"../util/requestBuilder\";\n//import fetch from \"cross-fetch\";\nimport fakeData from '../fake-data/index.json'\n\nconst requestCurrentWeatherByZipCode = (zipCode) => ({\n  type: types.REQUEST_CURRENT_WEATHER_BY_ZIP_CODE,\n  zipCode: zipCode\n})\n\nconst receiveCurrentWeatherByZipCode = (json) => ({\n  type: types.RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE,\n  currentWeatherData: json,\n  receivedAt: Date.now()\n})\n\nconst updateZipCode = (zipCode) => ({\n  type: types.UPDATE_ZIP_CODE,\n  zipCode: zipCode\n})\n\n// const fetchCurrentWeatherByZipCode = (zipCode = 92071) => {\n//   debugger\n//   return dispatch => {\n//     dispatch(requestCurrentWeatherByZipCode(zipCode))\n//     const requestBuilder = new RequestBuilder()\n//     const request = requestBuilder.BuildRequestForTemperatureForZipCode(zipCode)\n//     return fetch(request)\n//     .then(response => response.json())\n//     .then(json => {\n//       dispatch(receiveCurrentWeatherByZipCode(json))\n//     })\n//     .catch((error) => {\n//       console.error(error)\n//     })\n//   }\n// }\n\nconst fetchCurrentWeatherByZipCode = (zipCode = 92071) => {\n  debugger\n  return dispatch => {\n      dispatch(requestCurrentWeatherByZipCode(zipCode))\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        debugger\n        dispatch(receiveCurrentWeatherByZipCode(fakeData))\n        resolve()\n      }, 1500)\n    })\n  }\n}\n\n\nexport default {\n  requestCurrentWeatherByZipCode,\n  receiveCurrentWeatherByZipCode,\n  fetchCurrentWeatherByZipCode,\n  updateZipCode\n}","import { connect } from 'react-redux'\nimport TextInput from './TextInput.js'\nimport actions from '../redux/actions.js'\n\nconst mapStateToProps = (state) => {\n  return {\n    zipCode: state.zipCode\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateZipCode: (zipCode) => dispatch(actions.updateZipCode(zipCode))\n})\n\nconst ConnectedTextInput = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TextInput)\n\nexport default ConnectedTextInput","import React, { Component } from 'react'\nimport ConnectedTextInput from './ConnectedTextInput.js'\n//import '../App.css'\n\nclass InputPanel extends Component {\n\n  handleFetchButtonClick = () => {\n    debugger\n    this.props.fetchCurrentWeatherByZipCode(this.props.zipCode)\n  }\n\n  render() {\n    return (\n      <div className=\"input-panel\">\n        <div className=\"outer-content\">\n          <div className=\"overlay-content\">\n            <div className=\"content\">\n              <h2 className=\"weather-header\">Current Weather</h2>\n              <div className=\"weather-input-row\">\n                <div className=\"zipCode-input-label\">zip code</div>\n                <div><ConnectedTextInput /></div>\n                <div>\n                  <button onClick={this.handleFetchButtonClick}>FETCH</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InputPanel\n","import { connect } from 'react-redux'\nimport InputPanel from './InputPanel.js'\nimport actions from '../redux/actions.js'\n\nconst mapStateToProps = (state) => ({\n  temperature: state.temperature,\n  zipCode: state.zipCode\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentWeatherByZipCode: (zipCode) => dispatch(actions.fetchCurrentWeatherByZipCode(zipCode))\n})\n\nconst ConnectedInputPanel = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InputPanel)\n\nexport default ConnectedInputPanel","import React from 'react'\n//import logo from './logo.svg'\nimport ConnectedInputPanel from './components/ConnectedInputPanel.js'\nimport './App.css'\n\nfunction App() {\n  return (\n        <div>\n          <main className=\"main\">\n            <ConnectedInputPanel/>\n            <div className=\"weather-panel\">\n              &nbsp;\n            </div>\n          </main>\n        </div>\n  )\n}\n\nexport default App\n","import types from './types'\n\nconst INITIAL_STATE = {\n  temperature: null,\n  zipCode: null\n}\n\nconst homeReducer = (state=INITIAL_STATE, action) => {\n  switch(action.type) {\n    case types.FETCH_CURRENT_WEATHER_BY_ZIP_CODE: {\n      debugger\n      const { temperature } = action\n      debugger\n      //const { count } = state\n      return {\n        ...state,\n        temperature\n      }\n    }\n    case types.UPDATE_ZIP_CODE: {\n      const { zipCode } = action\n      return {\n        ...state,\n        zipCode\n      }\n    }\n    //TODO: add other cases here\n    default: return state\n  }\n}\n\nexport default homeReducer","import homeReducer from './reducers'\nexport { default as homeOperations } from './operations'\nexport { default as homeTypes } from './types'\nexport default homeReducer","import { combineReducers } from 'redux'\nimport  homeReducer  from './redux'\n\nconst rootReducer = combineReducers({\n  home: homeReducer\n})\n\nexport default rootReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers.js'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}