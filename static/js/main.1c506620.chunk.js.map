{"version":3,"sources":["redux/types.js","util/util.js","util/requestBuilderOpenWeatherMap.js","redux/actions.js","components/TextInput.js","components/ConnectedTextInput.js","components/InputPanel.js","components/ConnectedInputPanel.js","components/WeatherPanel.js","components/ConnectedWeatherPanel.js","App.js","redux/reducers.js","redux/index.js","reducers.js","serviceWorker.js","index.js"],"names":["value","RequestBuilderOpenWeatherMap","useHTTPS","useMetric","this","domain","apiKey","httpMode","baseUrl","zipCode","_unitsParam","_apiParam","metric","util","requestCurrentWeatherByZipCode","type","types","receiveCurrentWeatherByZipCode","json","zipCodeWeather","receivedAt","Date","now","showCurrentWeatherByZipCodeError","error","hideCurrentWeatherByZipCodeError","dispatch","request","TemperatureByZipCodeUrl","fetch","then","response","main","temperature","temp","apparentTemperature","feels_like","low","temp_min","high","temp_max","catch","setTimeout","TextInput","onChangeField","e","props","updateZipCode","target","onKeyDown","keyCode","fetchCurrentWeatherByZipCode","className","size","onChange","event","Component","ConnectedTextInput","connect","state","home","actions","InputPanel","handleFetchButtonClick","onClick","ConnectedInputPanel","WeatherPanel","weather","requestingData","showErrorPanel","style","textAlign","color","Math","round","ConnectedWeatherPanel","App","INITIAL_STATE","homeReducer","action","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.1c506620.chunk.js","sourcesContent":["const FETCH_CURRENT_WEATHER_BY_ZIP_CODE = 'FETCH_CURRENT_WEATHER_BY_ZIP_CODE'\nconst REQUEST_CURRENT_WEATHER_BY_ZIP_CODE = 'REQUEST_CURRENT_WEATHER_BY_ZIP_CODE'\nconst RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE = 'RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE'\nconst SHOW_CURRENT_WEATHER_BY_ZIP_CODE_ERROR = 'SHOW_CURRENT_WEATHER_BY_ZIP_CODE_ERROR'\nconst HIDE_CURRENT_WEATHER_BY_ZIP_CODE_ERROR = 'HIDE_CURRENT_WEATHER_BY_ZIP_CODE_ERROR'\nconst UPDATE_ZIP_CODE = 'UPDATE_ZIP_CODE'\n\nexport default {\n  FETCH_CURRENT_WEATHER_BY_ZIP_CODE,\n  REQUEST_CURRENT_WEATHER_BY_ZIP_CODE,\n  RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE,\n  SHOW_CURRENT_WEATHER_BY_ZIP_CODE_ERROR,\n  HIDE_CURRENT_WEATHER_BY_ZIP_CODE_ERROR,\n  UPDATE_ZIP_CODE\n}","const isNullOrUndefined = (value) => {\n  return ( typeof value === 'undefined' || value === null )\n}\n\nexport default {\n  isNullOrUndefined\n}","import util from './util.js'\n\nexport default class RequestBuilderOpenWeatherMap {\n  constructor(useHTTPS = true, useMetric = false) {\n    this.domain = 'api.openweathermap.org'\n    //NOTE: would never put credentials in public repository for production apps\n    this.apiKey = '3134ca6f362d84c16ddad5b66f3466bc'\n    const httpMode = useHTTPS ? 'https' : 'http'\n    this.baseUrl = `${httpMode}://${this.domain}/data/2.5/weather?`\n    this.useMetric = useMetric\n  }\n\n  TemperatureByZipCodeUrl(zipCode, useMetric) {\n    return `${this.baseUrl}zip=${zipCode}&${this._unitsParam()}&${this._apiParam()}`\n  }\n\n  _unitsParam (useMetric) {\n    const metric = util.isNullOrUndefined(useMetric) ? this.useMetric : useMetric\n    const unit = metric ? 'metric' : 'imperial'\n    return `units=${unit}`\n  }\n\n  _apiParam () {\n    return `APPID=${this.apiKey}`\n  }\n}","import types from './types.js'\nimport fetch from 'cross-fetch'\nimport RequestBuilderOpenWeatherMap from \"../util/requestBuilderOpenWeatherMap\"\n\nconst requestCurrentWeatherByZipCode = (zipCode) => ({\n  type: types.REQUEST_CURRENT_WEATHER_BY_ZIP_CODE,\n  zipCode: zipCode\n})\n\nconst receiveCurrentWeatherByZipCode = (json) => ({\n  type: types.RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE,\n  zipCodeWeather: json,\n  receivedAt: Date.now()\n})\n\nconst showCurrentWeatherByZipCodeError = (error) => ({\n  type: types.SHOW_CURRENT_WEATHER_BY_ZIP_CODE_ERROR,\n  error,\n  receivedAt: Date.now()\n})\n\nconst hideCurrentWeatherByZipCodeError = (error) => ({\n  type: types.HIDE_CURRENT_WEATHER_BY_ZIP_CODE_ERROR,\n  error\n})\n\nconst updateZipCode = (zipCode) => ({\n  type: types.UPDATE_ZIP_CODE,\n  zipCode: zipCode\n})\n\nconst fetchCurrentWeatherByZipCode = (zipCode) => {\n  return dispatch => {\n    dispatch(requestCurrentWeatherByZipCode(zipCode))\n    const requestBuilder = new RequestBuilderOpenWeatherMap()\n    const request = requestBuilder.TemperatureByZipCodeUrl(zipCode)\n    return fetch(request)\n    .then(response => {\n      return response.json()\n    })\n    .then(json => {\n      const {\n        temp: temperature,\n        feels_like: apparentTemperature,\n        temp_min: low,\n        temp_max: high\n      } = json.main\n\n      const zipCodeWeather = {\n        temperature,\n        apparentTemperature,\n        low,\n        high\n      }\n      return dispatch(receiveCurrentWeatherByZipCode(zipCodeWeather))\n    })\n    .catch(error => {\n      dispatch(showCurrentWeatherByZipCodeError(error))\n      setTimeout(() => {\n        dispatch(hideCurrentWeatherByZipCodeError(error))\n      }, 3000)\n    })\n  }\n}\n\nexport default {\n  requestCurrentWeatherByZipCode,\n  receiveCurrentWeatherByZipCode,\n  fetchCurrentWeatherByZipCode,\n  showCurrentWeatherByZipCodeError,\n  hideCurrentWeatherByZipCodeError,\n  updateZipCode\n}","import React, { Component } from 'react'\n\nclass TextInput extends Component {\n\n  onChangeField = (e) => {\n    this.props.updateZipCode(e.target.value)\n  }\n\n  onKeyDown = (e) => {\n    if(e.keyCode === 13) {\n        this.props.fetchCurrentWeatherByZipCode(this.props.zipCode)\n    }\n  }\n\n  render() {\n      return (\n            <input\n                type=\"text\"\n                className=\"text-input\"\n                value = { this.props.zipCode }\n                size=\"5\"\n                onChange= {event => this.onChangeField(event)}\n                onKeyDown= {event => this.onKeyDown(event)}\n              />\n      )\n  }\n}\n\nexport default TextInput\n","import { connect } from 'react-redux'\nimport actions from '../redux/actions.js'\nimport TextInput from './TextInput.js'\n\nconst mapStateToProps = (state) => {\n  return {\n    zipCode: state.home.zipCode\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateZipCode: (zipCode) => dispatch(actions.updateZipCode(zipCode)),\n  fetchCurrentWeatherByZipCode: (zipCode) => dispatch(actions.fetchCurrentWeatherByZipCode(zipCode))\n})\n\nconst ConnectedTextInput = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TextInput)\n\nexport default ConnectedTextInput","import React, { Component } from 'react'\nimport ConnectedTextInput from './ConnectedTextInput.js'\n\nclass InputPanel extends Component {\n\n  handleFetchButtonClick = () => {\n    this.props.fetchCurrentWeatherByZipCode(this.props.zipCode)\n  }\n\n  render() {\n    return (\n      <div className=\"input-panel\">\n        <div className=\"outer-content\">\n          <div className=\"overlay-content\">\n            <div className=\"content\">\n              <h2 className=\"weather-header\">Current Weather</h2>\n              <div className=\"weather-input-row\">\n                <div className=\"zipCode-input-label\">zip code</div>\n                <div><ConnectedTextInput /></div>\n                <div>\n                  <button onClick={this.handleFetchButtonClick}>FETCH</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InputPanel\n","import { connect } from 'react-redux'\nimport actions from '../redux/actions.js'\nimport InputPanel from './InputPanel.js'\n\nconst mapStateToProps = (state) => ({\n  zipCode: state.home.zipCode\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentWeatherByZipCode: (zipCode) => dispatch(actions.fetchCurrentWeatherByZipCode(zipCode))\n})\n\nconst ConnectedInputPanel = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InputPanel)\n\nexport default ConnectedInputPanel","import React, { Component } from 'react'\n\nclass WeatherPanel extends Component {\n\n  render() {\n    const {apparentTemperature, high, low, requestingData, showErrorPanel, temperature} = this.props\n    let weather\n    if (showErrorPanel) {\n      weather = <div style={{textAlign: 'center'}}>\n                  <h1 style={{color: 'red'}}>Error requesting data!</h1>\n                  <h2>Please try again later</h2>\n                </div>\n    } else if (requestingData) {\n      weather = <div className=\"loading-wrapper\">\n        <div className=\"sk-cube-grid\">\n          <div className=\"sk-cube sk-cube1\"></div>\n          <div className=\"sk-cube sk-cube2\"></div>\n          <div className=\"sk-cube sk-cube3\"></div>\n          <div className=\"sk-cube sk-cube4\"></div>\n          <div className=\"sk-cube sk-cube5\"></div>\n          <div className=\"sk-cube sk-cube6\"></div>\n          <div className=\"sk-cube sk-cube7\"></div>\n          <div className=\"sk-cube sk-cube8\"></div>\n          <div className=\"sk-cube sk-cube9\"></div>\n        </div>\n      </div>\n\n    } else if (temperature && apparentTemperature && high && low) {\n      weather = <div className=\"temperature-side\">\n                  <div className=\"high-low-line\">\n                    <span className=\"high-temp-span\">{ Math.round(high) }&deg;</span>&nbsp;&nbsp;|&nbsp;&nbsp;<span className=\"low-temp-span\">{ Math.round(low) }&deg;</span>\n                  </div>\n                  <div className=\"main-temp-line\">{ Math.round(temperature) }<sup className=\"main-unit-indicator\">&deg;F</sup></div>\n                  <div className=\"apparent-temp-line\">LIKE <span>{ Math.round(apparentTemperature) }&deg;</span></div>\n                </div>\n\n    } else {\n      weather = <div></div>\n    }\n    return (\n      <div className=\"weather-panel\">\n        {weather}\n      </div>\n    )\n  }\n}\n\nexport default WeatherPanel\n","import { connect } from 'react-redux'\nimport WeatherPanel from './WeatherPanel.js'\n\nconst mapStateToProps = (state) => {\n  if (state.home.zipCodeWeather) {\n    const {\n      apparentTemperature,\n      high,\n      low,\n      temperature\n    } = state.home.zipCodeWeather\n    const { requestingData, showErrorPanel } = state.home\n    return {\n      apparentTemperature,\n      high,\n      low,\n      requestingData,\n      showErrorPanel,\n      temperature\n    }\n  } else {\n    return {\n      apparentTemperature: null,\n      high: null,\n      low: null,\n      requestingData: false,\n      showErrorPanel: false,\n      temperature: null\n    }\n  }\n}\n\nconst ConnectedWeatherPanel = connect(\n  mapStateToProps\n)(WeatherPanel)\n\nexport default ConnectedWeatherPanel","import React from 'react'\nimport './App.css'\nimport ConnectedInputPanel from './components/ConnectedInputPanel.js'\nimport ConnectedWeatherPanel from './components/ConnectedWeatherPanel'\n\nfunction App() {\n  return (\n    <div>\n      <main className=\"main\">\n        <ConnectedInputPanel/>\n        <ConnectedWeatherPanel/>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import types from './types'\n\nconst INITIAL_STATE = {\n  zipCode: '',\n  zipCodeWeather: {\n    temperature: null,\n    apparentTemperature: null,\n    high: null,\n    low: null\n  },\n  requestingData: false,\n  showErrorPanel: false\n}\n\nconst homeReducer = (state=INITIAL_STATE, action) => {\n  switch(action.type) {\n    case types.FETCH_CURRENT_WEATHER_BY_ZIP_CODE: {\n      return {\n        ...state,\n        requestingData: true\n      }\n    }\n    case types.REQUEST_CURRENT_WEATHER_BY_ZIP_CODE: {\n      return {\n        ...state,\n        requestingData: true\n      }\n    }\n    case types.RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE: {\n      const { zipCodeWeather } = action\n      if (zipCodeWeather) {\n        return {\n          ...state,\n          zipCodeWeather,\n          requestingData: false\n        }\n      } else {\n        return {\n          ...state,\n          requestingData: false\n        }\n      }\n    }\n    case types.SHOW_CURRENT_WEATHER_BY_ZIP_CODE_ERROR: {\n      return {\n        ...state,\n        requestingData: false,\n        showErrorPanel: true\n      }\n    }\n\n    case types.HIDE_CURRENT_WEATHER_BY_ZIP_CODE_ERROR: {\n      return {\n        ...INITIAL_STATE\n      }\n    }\n\n    case types.UPDATE_ZIP_CODE: {\n      const { zipCode } = action\n      return {\n        ...state,\n        zipCode\n      }\n    }\n    //TODO: add other cases here\n    default: return state\n  }\n}\n\nexport default homeReducer","import homeReducer from './reducers'\nexport { default as homeTypes } from './types'\nexport default homeReducer","import { combineReducers } from 'redux'\nimport  homeReducer  from './redux'\n\nconst rootReducer = combineReducers({\n  home: homeReducer\n})\n\nexport default rootReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers.js'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}