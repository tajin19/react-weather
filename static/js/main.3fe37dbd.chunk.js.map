{"version":3,"sources":["components/TextInput.js","redux/types.js","redux/actions.js","components/ConnectedTextInput.js","components/InputPanel.js","components/ConnectedInputPanel.js","components/WeatherPanel.js","components/ConnectedWeatherPanel.js","App.js","redux/reducers.js","redux/index.js","reducers.js","serviceWorker.js","index.js"],"names":["TextInput","onChangeField","e","props","updateZipCode","target","value","type","className","this","zipCode","size","onChange","event","Component","requestCurrentWeatherByZipCode","types","receiveCurrentWeatherByZipCode","json","zipCodeWeather","receivedAt","Date","now","dispatch","Promise","resolve","reject","setTimeout","zipCodeData","fakeData","find","item","ConnectedTextInput","connect","state","home","actions","InputPanel","handleFetchButtonClick","fetchCurrentWeatherByZipCode","onClick","ConnectedInputPanel","WeatherPanel","weather","temperature","apparentTemperature","high","low","Math","round","ConnectedWeatherPanel","App","INITIAL_STATE","homeReducer","action","data","response","temperatureItem","parameter","startsWith","coordinates","dates","apparentTemperatureItem","highItem","lowItem","newWeatherObject","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fe37dbd.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TextInput extends Component {\n\n  onChangeField = (e) => {\n    this.props.updateZipCode(e.target.value)\n  }\n\n  render() {\n      return (\n            <input\n                type=\"text\"\n                className=\"text-input\"\n                value = { this.props.zipCode }\n                size=\"5\"\n                onChange= {event => this.onChangeField(event)}\n              />\n      )\n  }\n}\n\nexport default TextInput\n","const FETCH_CURRENT_WEATHER_BY_ZIP_CODE = 'FETCH_CURRENT_WEATHER_BY_ZIP_CODE'\nconst REQUEST_CURRENT_WEATHER_BY_ZIP_CODE = 'REQUEST_CURRENT_WEATHER_BY_ZIP_CODE'\nconst RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE = 'RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE'\nconst UPDATE_ZIP_CODE = 'UPDATE_ZIP_CODE'\n\nexport default {\n  FETCH_CURRENT_WEATHER_BY_ZIP_CODE,\n  REQUEST_CURRENT_WEATHER_BY_ZIP_CODE,\n  RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE,\n  UPDATE_ZIP_CODE\n}","import types from './types.js'\nimport fakeData from '../fake-data/index.json'\n\nconst requestCurrentWeatherByZipCode = (zipCode) => ({\n  type: types.REQUEST_CURRENT_WEATHER_BY_ZIP_CODE,\n  zipCode: zipCode\n})\n\nconst receiveCurrentWeatherByZipCode = (json) => ({\n  type: types.RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE,\n  zipCodeWeather: json,\n  receivedAt: Date.now()\n})\n\nconst updateZipCode = (zipCode) => ({\n  type: types.UPDATE_ZIP_CODE,\n  zipCode: zipCode\n})\n\nconst fetchCurrentWeatherByZipCode = (zipCode) => {\n  return dispatch => {\n    dispatch(requestCurrentWeatherByZipCode(zipCode))\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const zipCodeData = fakeData.find(item => {\n          return item.zipCode == zipCode\n        })\n        dispatch(receiveCurrentWeatherByZipCode(zipCodeData))\n        resolve()\n      }, 1000)\n    })\n  }\n}\n\nexport default {\n  requestCurrentWeatherByZipCode,\n  receiveCurrentWeatherByZipCode,\n  fetchCurrentWeatherByZipCode,\n  updateZipCode\n}","import { connect } from 'react-redux'\nimport TextInput from './TextInput.js'\nimport actions from '../redux/actions.js'\n\nconst mapStateToProps = (state) => {\n  return {\n    zipCode: state.home.zipCode\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateZipCode: (zipCode) => dispatch(actions.updateZipCode(zipCode))\n})\n\nconst ConnectedTextInput = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TextInput)\n\nexport default ConnectedTextInput","import React, { Component } from 'react'\nimport ConnectedTextInput from './ConnectedTextInput.js'\n\nclass InputPanel extends Component {\n\n  handleFetchButtonClick = () => {\n    this.props.fetchCurrentWeatherByZipCode(this.props.zipCode)\n  }\n\n  render() {\n    return (\n      <div className=\"input-panel\">\n        <div className=\"outer-content\">\n          <div className=\"overlay-content\">\n            <div className=\"content\">\n              <h2 className=\"weather-header\">Current Weather</h2>\n              <div className=\"weather-input-row\">\n                <div className=\"zipCode-input-label\">zip code</div>\n                <div><ConnectedTextInput /></div>\n                <div>\n                  <button onClick={this.handleFetchButtonClick}>FETCH</button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default InputPanel\n","import { connect } from 'react-redux'\nimport InputPanel from './InputPanel.js'\nimport actions from '../redux/actions.js'\n\nconst mapStateToProps = (state) => ({\n  zipCode: state.home.zipCode\n})\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentWeatherByZipCode: (zipCode) => dispatch(actions.fetchCurrentWeatherByZipCode(zipCode))\n})\n\nconst ConnectedInputPanel = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(InputPanel)\n\nexport default ConnectedInputPanel","import React, { Component } from 'react'\n\nclass WeatherPanel extends Component {\n\n  render() {\n    const {temperature, apparentTemperature, high, low} = this.props\n    let weather\n    if (temperature && apparentTemperature && high && low) {\n      weather = <div className=\"temperature-side\">\n                    <div className=\"high-low-line\"><span>{ Math.round(high) }&deg;</span>&nbsp;&nbsp;|&nbsp;&nbsp;<span>{ Math.round(low) }&deg;</span></div>\n                    <div className=\"main-temp-line\">{ Math.round(temperature) }<sup>&deg;F</sup></div>\n                    <div className=\"apparent-temp-line\">LIKE <span>{ Math.round(apparentTemperature) }&deg;</span></div>\n                  </div>\n\n    } else {\n      weather = <div></div>\n    }\n    return (\n      <div className=\"weather-panel\">\n        {weather}\n      </div>\n    )\n  }\n}\n\nexport default WeatherPanel\n","import { connect } from 'react-redux'\nimport WeatherPanel from './WeatherPanel.js'\n\nconst mapStateToProps = (state) => {\n  if (state.home.zipCodeWeather) {\n    const {\n      temperature,\n      apparentTemperature,\n      high,\n      low\n    } = state.home.zipCodeWeather\n    return {\n      temperature,\n      apparentTemperature,\n      high,\n      low\n    }\n  } else {\n    return {\n      temperature: null,\n      apparentTemperature: null,\n      high: null,\n      low: null\n    }\n  }\n}\n\nconst ConnectedWeatherPanel = connect(\n  mapStateToProps\n)(WeatherPanel)\n\nexport default ConnectedWeatherPanel","import React from 'react'\nimport './App.css'\nimport ConnectedInputPanel from './components/ConnectedInputPanel.js'\nimport ConnectedWeatherPanel from './components/ConnectedWeatherPanel'\n\nfunction App() {\n  return (\n    <div>\n      <main className=\"main\">\n        <ConnectedInputPanel/>\n        <ConnectedWeatherPanel/>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import types from './types'\n\nconst INITIAL_STATE = {\n  zipCode: '',\n  zipCodeWeather: {\n    temperature: null,\n    apparentTemperature: null,\n    high: null,\n    low: null\n  }\n}\n\nconst homeReducer = (state=INITIAL_STATE, action) => {\n  switch(action.type) {\n    case types.FETCH_CURRENT_WEATHER_BY_ZIP_CODE: {\n      return state\n    }\n    case types.RECEIVE_CURRENT_WEATHER_BY_ZIP_CODE: {\n      debugger\n      const { zipCodeWeather } = action\n      const { data } = zipCodeWeather.response\n      if (data) {\n        let temperature = null\n        let apparentTemperature = null\n        let high = null\n        let low = null\n        const temperatureItem = data.find((item) => {\n          return item.parameter.startsWith('t_0')\n        })\n        if (temperatureItem) {\n          temperature = temperatureItem.coordinates[0].dates[0].value\n        }\n        const apparentTemperatureItem = data.find((item) => {\n          return item.parameter.startsWith('t_apparent')\n        })\n        if (apparentTemperatureItem) {\n          apparentTemperature = apparentTemperatureItem.coordinates[0].dates[0].value\n        }\n        const highItem = data.find((item) => {\n          return item.parameter.startsWith('t_max')\n        })\n        if (highItem) {\n          high = highItem.coordinates[0].dates[0].value\n        }\n        const lowItem = data.find((item) => {\n          return item.parameter.startsWith('t_min')\n        })\n        if (lowItem) {\n          low = lowItem.coordinates[0].dates[0].value\n        }\n        const newWeatherObject = {\n          temperature,\n          apparentTemperature,\n          high,\n          low\n        }\n        return {\n          ...state,\n          zipCodeWeather: newWeatherObject\n        }\n      } else {\n        return state\n      }\n    }\n    case types.UPDATE_ZIP_CODE: {\n      const { zipCode } = action\n      return {\n        ...state,\n        zipCode\n      }\n    }\n    //TODO: add other cases here\n    default: return state\n  }\n}\n\nexport default homeReducer","import homeReducer from './reducers'\nexport { default as homeTypes } from './types'\nexport default homeReducer","import { combineReducers } from 'redux'\nimport  homeReducer  from './redux'\n\nconst rootReducer = combineReducers({\n  home: homeReducer\n})\n\nexport default rootReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport {applyMiddleware, createStore} from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport rootReducer from './reducers.js'\nimport * as serviceWorker from './serviceWorker'\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}